---
layout : post
title : So You Messed Up Your Repo
tags :
- git
- terminal
- screwup
---

h1. {{ page.title }}

In a perfect world, it'd never happen. But then again, we're developers, which mean it invariably will happen, sooner or later. You've messed up a svn repository by manually moving files and folders around. The case that I've most frequently encountered goes like this:

# You're working on a new project, or area of a project. 
# There are some assets that need to be _copied_ to a new location. (During the day job this is usually a bulk load of javascript files with all sorts of sub-directories and heirarcies)
# The folder(s) get copied _manually_ to a new location -ie with a standard *cp* command or a copy/paste operation. 

As you'll know, each folder in a repo has a hidden *.svn* folder, which keeps the nessecary bits and pieces for the contents. If you've copied a folder over this way, you've also taken all of the associated *.svn* folders along for the ride. If it's just a single directory, no biggie, delete the *.svn* folder and you're free to add the folder as you always would. But, as is generally the case, you'll have lots of sub-folders and directories (I'm looking at you jQuery.ui) and deleting them manually is not an option. 

For these cases the following bash command comes in handy:

{% highlight bash %}
find ./ -name ".svn" | xargs rm -Rfv
{% endhighlight %}

All that does is recursively rip through the folder (starting in your current path) and forcably remove any and all *.svn* folders it finds. Simples.

Of course if you're doing it properly this should never happen. Rather than straight copying files, you'd do an _svn export *a* *b*_, and we'd never get into this mess. But as with so many things, you've got to shoot yourself in the foot first to understand how much it hurts, and how to staunch the bleeding when you do. 

Wait. What?
